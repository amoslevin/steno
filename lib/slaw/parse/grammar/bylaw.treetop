require 'slaw/parse/grammar_helpers'

module Slaw
  grammar Bylaw
    include Slaw::Parse::GrammarHelpers

    rule bylaw
      preamble?
      chapter+ <Bylaw>
    end

    rule preamble
      frontmatter*
      preamble_heading
      naked_statement+ <Preamble>
    end

    rule frontmatter
      !(preamble_heading) content eol <Frontmatter>
    end

    rule chapter
      chapter_heading?
      part+ <Chapter>
    end

    rule part
      part_heading?
      section+ <Part>
    end

    rule chapter_heading
      space? chapter_heading_prefix eol? space? content eol <ChapterHeading>
    end

    rule part_heading
      space? part_heading_prefix eol? space? content eol <PartHeading>
    end

    rule section
      section_title
      section_content <Section>
    end

    rule section_title
      section_title_1 / section_1_title
    end

    rule section_title_1
      &{ |s| options[:section_number_after_title] }
      # Section title
      # 1. Section content
      content eol
      section_title_prefix space
    end

    rule section_1_title
      !{ |s| options[:section_number_after_title] }
      # 1. Section title
      # content
      section_title_prefix space
      content eol
    end

    rule section_content
      subsection+
    end

    rule subsection
      (numbered_statement / naked_statement)
      blocklist? <Subsection>
    end

    rule numbered_statement
      space? numbered_statement_prefix space? (!blocklist_item_prefix content eol)? <NumberedStatement>
    end

    rule naked_statement
      space? !(part_heading_prefix / chapter_heading_prefix / section_title / numbered_statement_prefix) content eol <NakedStatement>
    end

    ##########
    # prefixes

    rule preamble_heading
      'PREAMBLE' eol
    end

    rule part_heading_prefix
      ('PART' / 'Part') space alphanums ':'?
    end

    rule chapter_heading_prefix
      ('CHAPTER' / 'Chapter') space alphanums
    end

    rule section_title_prefix
      number_letter '.'
    end

    rule numbered_statement_prefix
      # there are two subsection handling syntaxes:
      # 
      # (1) foo
      # (2A) foo
      #
      # and
      #
      # 8.2 for
      # 8.3 bar
      #
      # The second is less common, but this allows us to handle it.
      # Note that it is usually accompanied by a similar list number format:
      #
      # 8.2.1 item 1
      # 8.2.2 item 2
      #
      # which aren't subsections, but lists, so force the space at the end
      # of the number to catch this case.
      ('(' number_letter ')' / dotted_number_2 '.'? space)
    end

    ##########
    # definitions section

    rule definitions_section
      space? content eol
      definition+ <DefinitionsSection>
    end

    rule definition
      space? quotes non_quotes+ quotes content eol
      (blocklist / definition_statement)* <Definition>
    end

    rule definition_statement
      space? !(quotes) content eol <DefinitionStatement>
    end

    ##########
    # blocklists

    rule blocklist
      blocklist_item+ <Blocklist>
    end

    rule blocklist_item
      space? blocklist_item_prefix space content eol <BlocklistItem>
    end

    rule blocklist_item_prefix
      ('(' letter_ordinal ')') / dotted_number_3
    end

    rule letter_ordinal
      letter (letter / digit)*
    end

    #########
    ## one line of basic content

    rule content
      # anything but a newline, followed by a
      # newline or end of file (without consuming the newline)
      [^\n]+ &eol
    end

    ##########
    # terminals

    # eg. 2, 2A, 2b
    rule number_letter
      number letter*
    end

    rule dotted_number_3
      number '.' number ('.' number)+
    end

    rule dotted_number_2
      number '.' number
    end

    rule number
      digit+
    end

    rule digit
      [0-9]
    end

    rule letter
      [a-zA-Z]
    end

    rule alphanums
      [a-zA-Z0-9]+
    end

    rule quotes
      ["“”]
    end
    
    rule non_quotes
      [^"“”]
    end

    ##########
    # whitespace

    rule space
      [ \t]+
    end

    rule eol
      newline / end_of_file
    end

    rule newline
      "\n"
    end

    ##########
    # end of file

    rule end_of_file
      !.
    end
  end
end
